const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const input = require('input');
const xss = require('xss');
const fs = require('fs');
const path = require('path');
const { savePosts } = require('./data-storage');
const { log } = require('./logger');
require('dotenv').config();

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª—å–Ω–æ
 * @param {string} tempPath - –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 * @param {string} mediaType - —Ç–∏–ø –º–µ–¥–∏–∞ ('photo' –∏–ª–∏ 'video')
 * @param {string} mimeType - MIME —Ç–∏–ø
 * @returns {Promise<string|null>}
 */
async function saveMediaToLocal(tempPath, mediaType, mimeType) {
    const { initMediaDirectories, generateFileName, getExtensionFromMimeType, PHOTOS_DIR, VIDEOS_DIR } = require('./media-downloader');

    initMediaDirectories();

    const extension = getExtensionFromMimeType(mimeType);
    const filename = generateFileName(mediaType, extension);

    const targetDir = mediaType === 'photo' ? PHOTOS_DIR : VIDEOS_DIR;
    const targetPath = path.join(targetDir, filename);

    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
    fs.copyFileSync(tempPath, targetPath);

    return `/media/${mediaType === 'photo' ? 'photos' : 'videos'}/${filename}`;
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MTProto API (–Ω–µ Bot API) –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏
 */
async function exportTelegramHistory() {
    console.log('üì• –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const apiId = parseInt(process.env.TELEGRAM_API_ID);
    const apiHash = process.env.TELEGRAM_API_HASH;
    const channelUsername = process.env.TELEGRAM_CHANNEL_USERNAME || 'ingcommitte';
    const stringSession = process.env.TELEGRAM_SESSION || '';

    if (!apiId || !apiHash) {
        console.error('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API credentials:');
        console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org');
        console.log('2. –í–æ–π–¥–∏—Ç–µ —Å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "API development tools"');
        console.log('4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        console.log('5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ api_id –∏ api_hash –≤ .env —Ñ–∞–π–ª\n');
        console.log('–î–æ–±–∞–≤—å—Ç–µ –≤ .env:');
        console.log('TELEGRAM_API_ID=–≤–∞—à_api_id');
        console.log('TELEGRAM_API_HASH=–≤–∞—à_api_hash');
        console.log('TELEGRAM_CHANNEL_USERNAME=ingcommitte\n');
        process.exit(1);
    }

    const session = new StringSession(stringSession);
    const client = new TelegramClient(session, apiId, apiHash, {
        connectionRetries: 5,
    });

    try {
        console.log('üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
        await client.start({
            phoneNumber: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '),
            password: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω): '),
            phoneCode: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: '),
            onError: (err) => console.error('‚ùå –û—à–∏–±–∫–∞:', err),
        });

        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!');
        console.log('üîë Session string –¥–ª—è .env (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤):');
        console.log(client.session.save());
        console.log('\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞...\n');

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        const channel = await client.getEntity(channelUsername);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: ${channel.title}`);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        const messages = [];
        const limit = parseInt(process.env.EXPORT_LIMIT) || 100; // –°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∏—Ç—å

        console.log(`üìä –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ${limit} —Å–æ–æ–±—â–µ–Ω–∏–π...\n`);

        const result = await client.getMessages(channel, {
            limit: limit,
        });

        let processedCount = 0;

        for (const message of result) {
            if (!message.message && !message.media) {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            }

            let text = message.message || '';
            let mediaUrl = null;
            let mediaType = null;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            if (message.entities && message.entities.length > 0) {
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º entities –ø–æ offset –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                const entities = [...message.entities].sort((a, b) => b.offset - a.offset);

                entities.forEach(entity => {
                    const start = entity.offset;
                    const length = entity.length;

                    if (start + length <= text.length) {
                        const entityText = text.substring(start, start + length);
                        let replacement = entityText;

                        if (entity.className === 'MessageEntityBold') {
                            replacement = `<b>${entityText}</b>`;
                        } else if (entity.className === 'MessageEntityItalic') {
                            replacement = `<i>${entityText}</i>`;
                        } else if (entity.className === 'MessageEntityTextUrl') {
                            replacement = `<a href="${entity.url}" target="_blank" rel="noopener noreferrer">${entityText}</a>`;
                        } else if (entity.className === 'MessageEntityUrl') {
                            let url = entityText;
                            if (!url.startsWith('http://') && !url.startsWith('https://')) {
                                url = 'http://' + url;
                            }
                            replacement = `<a href="${url}" target="_blank" rel="noopener noreferrer">${entityText}</a>`;
                        }

                        text = text.substring(0, start) + replacement + text.substring(start + length);
                    }
                });
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
            if (message.media) {
                if (message.media.className === 'MessageMediaPhoto') {
                    mediaType = 'photo';
                    try {
                        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                        const buffer = await client.downloadMedia(message.media);
                        if (buffer) {
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ media-downloader
                            const tempPath = path.join(__dirname, '..', 'temp', `photo_${message.id}.jpg`);
                            const tempDir = path.dirname(tempPath);
                            if (!fs.existsSync(tempDir)) {
                                fs.mkdirSync(tempDir, { recursive: true });
                            }
                            fs.writeFileSync(tempPath, buffer);

                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                            mediaUrl = await saveMediaToLocal(tempPath, 'photo', 'image/jpeg');

                            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            fs.unlinkSync(tempPath);

                            console.log(`   üì∑ –°–∫–∞—á–∞–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ ${message.id}`);
                        }
                    } catch (photoError) {
                        console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ: ${photoError.message}`);
                        mediaUrl = null;
                    }
                } else if (message.media.className === 'MessageMediaDocument') {
                    if (message.media.document && message.media.document.mimeType.startsWith('video/')) {
                        mediaType = 'video';
                        try {
                            // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                            const buffer = await client.downloadMedia(message.media);
                            if (buffer) {
                                const mimeType = message.media.document.mimeType;
                                const ext = mimeType.split('/')[1] || 'mp4';
                                const tempPath = path.join(__dirname, '..', 'temp', `video_${message.id}.${ext}`);
                                const tempDir = path.dirname(tempPath);
                                if (!fs.existsSync(tempDir)) {
                                    fs.mkdirSync(tempDir, { recursive: true });
                                }
                                fs.writeFileSync(tempPath, buffer);

                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                                mediaUrl = await saveMediaToLocal(tempPath, 'video', mimeType);

                                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                fs.unlinkSync(tempPath);

                                console.log(`   üé• –°–∫–∞—á–∞–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞ ${message.id}`);
                            }
                        } catch (videoError) {
                            console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: ${videoError.message}`);
                            mediaUrl = null;
                        }
                    }
                }
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            text = text.replace(/\n/g, '<br>');

            // –û—á–∏—Å—Ç–∫–∞ –æ—Ç XSS
            const cleanText = xss(text, {
                whiteList: {
                    a: ['href', 'title', 'target', 'rel'],
                    b: [],
                    i: [],
                    br: [],
                    strong: [],
                    em: [],
                    p: [],
                    span: []
                }
            });

            messages.push({
                text: cleanText,
                date: new Date(message.date * 1000).toISOString(),
                mediaUrl: mediaUrl,
                mediaType: mediaType,
                messageId: message.id
            });

            processedCount++;
            if (processedCount % 10 === 0) {
                console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}/${result.length}`);
            }
        }

        console.log(`\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);

        if (messages.length > 0) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            savePosts(messages);
            console.log('üíæ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data/telegram-posts.json');

            log.info('Telegram history exported', {
                count: messages.length,
                channel: channelUsername
            });
        } else {
            console.log('‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error.message);
        log.error('Failed to export Telegram history', {
            error: error.message,
            stack: error.stack
        });
    } finally {
        await client.disconnect();
        console.log('\nüëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Telegram');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    exportTelegramHistory().then(() => {
        process.exit(0);
    }).catch(err => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
        process.exit(1);
    });
}

module.exports = { exportTelegramHistory };

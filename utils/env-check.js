const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvironmentVariables() {
    const requiredVars = [
        'TELEGRAM_BOT_TOKEN',
        'TELEGRAM_CHANNEL_ID'
    ];

    const warnings = [];
    const errors = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    const envPath = path.join(__dirname, '..', '.env');
    if (!fs.existsSync(envPath)) {
        console.error('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        console.log('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example:');
        console.log('   cp .env.example .env');
        console.log('   –ó–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.\n');
        warnings.push('.env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    requiredVars.forEach(varName => {
        if (!process.env[varName]) {
            errors.push(`${varName} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
            console.error(`‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${varName} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!`);
        } else if (process.env[varName].includes('your_') || process.env[varName].includes('_here')) {
            warnings.push(`${varName} —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–±–ª–æ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`);
            console.warn(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${varName} —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–±–ª–æ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!`);
        }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    const optionalVars = {
        'EMAIL_HOST': '–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é —Ñ–æ—Ä–º—É',
        'EMAIL_USER': '–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é —Ñ–æ—Ä–º—É',
        'EMAIL_PASS': '–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é —Ñ–æ—Ä–º—É',
        'EMAIL_TO': '–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã'
    };

    Object.entries(optionalVars).forEach(([varName, purpose]) => {
        if (!process.env[varName]) {
            warnings.push(`${varName} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (${purpose})`);
            console.warn(`‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${varName} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - ${purpose}`);
        }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º NODE_ENV
    if (!process.env.NODE_ENV) {
        process.env.NODE_ENV = 'development';
        console.log('‚ÑπÔ∏è  NODE_ENV —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ "development" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }

    return { errors, warnings };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞ –∏–∑ .env.example –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
function createEnvFileIfNotExists() {
    const envPath = path.join(__dirname, '..', '.env');
    const envExamplePath = path.join(__dirname, '..', '.env.example');

    if (!fs.existsSync(envPath) && fs.existsSync(envExamplePath)) {
        console.log('\nüìù –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ .env.example...');
        try {
            fs.copyFileSync(envExamplePath, envPath);
            console.log('‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —Å–≤–æ–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.\n');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .env —Ñ–∞–π–ª–∞:', error.message);
            return false;
        }
    }
    return false;
}

module.exports = {
    checkEnvironmentVariables,
    createEnvFileIfNotExists
};
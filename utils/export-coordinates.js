#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–∞—Ä—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –ò–ò –∞–≥–µ–Ω—Ç—É –ø—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ
 */

const fs = require('fs');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
const mapData = require('../public/js/mapData.js');
const interactiveMapPath = path.join(__dirname, '../public/js/interactive-map.js');

// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ interactive-map.js –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function extractMapDataFromFile() {
    const content = fs.readFileSync(interactiveMapPath, 'utf8');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    const citiesMatch = content.match(/const cities = \[([\s\S]*?)\];/);
    const villagesMatch = content.match(/const villages = \[([\s\S]*?)\];/);
    const culturalMatch = content.match(/const culturalSites = \[([\s\S]*?)\];/);
    const religiousMatch = content.match(/const religiousSites = \[([\s\S]*?)\];/);
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
    const cities = citiesMatch ? eval(`[${citiesMatch[1]}]`) : [];
    const villages = villagesMatch ? eval(`[${villagesMatch[1]}]`) : [];
    const culturalSites = culturalMatch ? eval(`[${culturalMatch[1]}]`) : [];
    const religiousSites = religiousMatch ? eval(`[${religiousMatch[1]}]`) : [];
    
    return { cities, villages, culturalSites, religiousSites };
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç
function exportToJSON() {
    const interactiveData = extractMapDataFromFile();
    
    const exportData = {
        metadata: {
            exportDate: new Date().toISOString(),
            version: "1.0",
            description: "–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –ò–Ω–≥—É—à–µ—Ç–∏–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"
        },
        borders: {
            modernBorders: mapData.modernBorders,
            historicalTerritories: mapData.historicalTerritories
        },
        objects: {
            cities: interactiveData.cities,
            villages: interactiveData.villages,
            culturalSites: interactiveData.culturalSites,
            religiousSites: interactiveData.religiousSites
        },
        statistics: {
            totalCities: interactiveData.cities.length,
            totalVillages: interactiveData.villages.length,
            totalCulturalSites: interactiveData.culturalSites.length,
            totalReligiousSites: interactiveData.religiousSites.length,
            totalObjects: interactiveData.cities.length + 
                         interactiveData.villages.length + 
                         interactiveData.culturalSites.length + 
                         interactiveData.religiousSites.length
        }
    };
    
    return JSON.stringify(exportData, null, 2);
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç
function exportToCSV() {
    const interactiveData = extractMapDataFromFile();
    const allObjects = [
        ...interactiveData.cities.map(obj => ({ ...obj, type: 'city' })),
        ...interactiveData.villages.map(obj => ({ ...obj, type: 'village' })),
        ...interactiveData.culturalSites.map(obj => ({ ...obj, type: 'cultural' })),
        ...interactiveData.religiousSites.map(obj => ({ ...obj, type: 'religious' }))
    ];
    
    const headers = ['name', 'type', 'latitude', 'longitude', 'description', 'history', 'image', 'population'];
    const rows = allObjects.map(obj => [
        `"${obj.name || ''}"`,
        obj.type,
        obj.coords ? obj.coords[0] : '',
        obj.coords ? obj.coords[1] : '',
        `"${(obj.description || '').replace(/"/g, '""')}"`,
        `"${(obj.history || '').replace(/"/g, '""')}"`,
        obj.image || '',
        obj.population || ''
    ]);
    
    return [headers.join(','), ...rows.map(row => row.join(','))].join('\n');
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ GeoJSON —Ñ–æ—Ä–º–∞—Ç
function exportToGeoJSON() {
    const interactiveData = extractMapDataFromFile();
    const allObjects = [
        ...interactiveData.cities.map(obj => ({ ...obj, type: 'city' })),
        ...interactiveData.villages.map(obj => ({ ...obj, type: 'village' })),
        ...interactiveData.culturalSites.map(obj => ({ ...obj, type: 'cultural' })),
        ...interactiveData.religiousSites.map(obj => ({ ...obj, type: 'religious' }))
    ];
    
    const features = allObjects.map(obj => ({
        type: "Feature",
        properties: {
            name: obj.name,
            type: obj.type,
            description: obj.description,
            history: obj.history,
            image: obj.image,
            population: obj.population
        },
        geometry: {
            type: "Point",
            coordinates: obj.coords ? [obj.coords[1], obj.coords[0]] : [0, 0] // GeoJSON –∏—Å–ø–æ–ª—å–∑—É–µ—Ç [lng, lat]
        }
    }));
    
    const geoJSON = {
        type: "FeatureCollection",
        features: features
    };
    
    return JSON.stringify(geoJSON, null, 2);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    const format = process.argv[2] || 'json';
    const outputFile = process.argv[3] || `map-data-export.${format}`;
    
    let data;
    let mimeType;
    
    switch (format.toLowerCase()) {
        case 'json':
            data = exportToJSON();
            mimeType = 'application/json';
            break;
        case 'csv':
            data = exportToCSV();
            mimeType = 'text/csv';
            break;
        case 'geojson':
            data = exportToGeoJSON();
            mimeType = 'application/geo+json';
            break;
        default:
            console.error('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: json, csv, geojson');
            process.exit(1);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É exports –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const exportsDir = path.join(__dirname, '../exports');
    if (!fs.existsSync(exportsDir)) {
        fs.mkdirSync(exportsDir, { recursive: true });
    }
    
    const outputPath = path.join(exportsDir, outputFile);
    fs.writeFileSync(outputPath, data, 'utf8');
    
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}`);
    console.log(`üìÅ –§–∞–π–ª: ${outputPath}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${(data.length / 1024).toFixed(2)} KB`);
    console.log(`üîó MIME —Ç–∏–ø: ${mimeType}`);
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const interactiveData = extractMapDataFromFile();
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –ì–æ—Ä–æ–¥–∞: ${interactiveData.cities.length}`);
    console.log(`   –°–µ–ª–∞: ${interactiveData.villages.length}`);
    console.log(`   –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: ${interactiveData.culturalSites.length}`);
    console.log(`   –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: ${interactiveData.religiousSites.length}`);
    console.log(`   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${interactiveData.cities.length + interactiveData.villages.length + interactiveData.culturalSites.length + interactiveData.religiousSites.length}`);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main();
}

module.exports = {
    exportToJSON,
    exportToCSV,
    exportToGeoJSON,
    extractMapDataFromFile
};
